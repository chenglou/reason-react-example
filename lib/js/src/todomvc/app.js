// Generated by BUCKLESCRIPT VERSION 1.7.5, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var $$Array     = require("bs-platform/lib/js/array.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var React       = require("react");
var $$String    = require("bs-platform/lib/js/string.js");
var Caml_obj    = require("bs-platform/lib/js/caml_obj.js");
var TodoItem    = require("./todoItem.js");
var Director    = require("director");
var Js_boolean  = require("bs-platform/lib/js/js_boolean.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var ReactDOMRe  = require("reason-react/lib/js/src/reactDOMRe.js");
var TodoFooter  = require("./todoFooter.js");
var ReasonReact = require("reason-react/lib/js/src/reasonReact.js");

var namespace = "reason-react-todos";

function saveLocally(todos) {
  var match = JSON.stringify(todos);
  if (match !== undefined) {
    localStorage.setItem(namespace, match);
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function handleChange($$event, state, _) {
  return /* Update */Block.__(0, [/* record */[
              /* nowShowing */state[/* nowShowing */0],
              /* editing */state[/* editing */1],
              /* newTodo */$$event.target.value,
              /* todos */state[/* todos */3]
            ]]);
}

function handleNewTodoKeyDown($$event, state, _) {
  if ($$event.keyCode === 13) {
    $$event.preventDefault();
    var nonEmptyValue = $$String.trim(state[/* newTodo */2]);
    if (nonEmptyValue === "") {
      return /* NoUpdate */0;
    } else {
      var todos = Pervasives.$at(state[/* todos */3], /* :: */[
            /* record */[
              /* id */Pervasives.string_of_float(Date.now()),
              /* title */nonEmptyValue,
              /* completed : false */0
            ],
            /* [] */0
          ]);
      saveLocally(todos);
      return /* Update */Block.__(0, [/* record */[
                  /* nowShowing */state[/* nowShowing */0],
                  /* editing */state[/* editing */1],
                  /* newTodo */"",
                  /* todos */todos
                ]]);
    }
  } else {
    return /* NoUpdate */0;
  }
}

function toggleAll($$event, state, _) {
  var checked = $$event.target.checked;
  var todos = List.map(function (todo) {
        return /* record */[
                /* id */todo[/* id */0],
                /* title */todo[/* title */1],
                /* completed */+checked
              ];
      }, state[/* todos */3]);
  saveLocally(todos);
  return /* Update */Block.__(0, [/* record */[
              /* nowShowing */state[/* nowShowing */0],
              /* editing */state[/* editing */1],
              /* newTodo */state[/* newTodo */2],
              /* todos */todos
            ]]);
}

function toggle(todoToToggle, _, state, _$1) {
  var todos = List.map(function (todo) {
        var match = Caml_obj.caml_equal(todo, todoToToggle);
        if (match !== 0) {
          return /* record */[
                  /* id */todo[/* id */0],
                  /* title */todo[/* title */1],
                  /* completed */1 - todo[/* completed */2]
                ];
        } else {
          return todo;
        }
      }, state[/* todos */3]);
  saveLocally(todos);
  return /* Update */Block.__(0, [/* record */[
              /* nowShowing */state[/* nowShowing */0],
              /* editing */state[/* editing */1],
              /* newTodo */state[/* newTodo */2],
              /* todos */todos
            ]]);
}

function destroy(todo, _, state, _$1) {
  var todos = List.filter(function (candidate) {
          return +(candidate !== todo);
        })(state[/* todos */3]);
  saveLocally(todos);
  return /* Update */Block.__(0, [/* record */[
              /* nowShowing */state[/* nowShowing */0],
              /* editing */state[/* editing */1],
              /* newTodo */state[/* newTodo */2],
              /* todos */todos
            ]]);
}

function edit(todo, _, state, _$1) {
  return /* Update */Block.__(0, [/* record */[
              /* nowShowing */state[/* nowShowing */0],
              /* editing : Some */[todo[/* id */0]],
              /* newTodo */state[/* newTodo */2],
              /* todos */state[/* todos */3]
            ]]);
}

function save(todoToSave, text, state, _) {
  var todos = List.map(function (todo) {
        var match = Caml_obj.caml_equal(todo, todoToSave);
        if (match !== 0) {
          return /* record */[
                  /* id */todo[/* id */0],
                  /* title */text,
                  /* completed */todo[/* completed */2]
                ];
        } else {
          return todo;
        }
      }, state[/* todos */3]);
  saveLocally(todos);
  return /* Update */Block.__(0, [/* record */[
              /* nowShowing */state[/* nowShowing */0],
              /* editing : None */0,
              /* newTodo */state[/* newTodo */2],
              /* todos */todos
            ]]);
}

function cancel(_, state, _$1) {
  return /* Update */Block.__(0, [/* record */[
              /* nowShowing */state[/* nowShowing */0],
              /* editing : None */0,
              /* newTodo */state[/* newTodo */2],
              /* todos */state[/* todos */3]
            ]]);
}

function clearCompleted(_, state, _$1) {
  var todos = List.filter(function (todo) {
          return 1 - todo[/* completed */2];
        })(state[/* todos */3]);
  saveLocally(todos);
  return /* Update */Block.__(0, [/* record */[
              /* nowShowing */state[/* nowShowing */0],
              /* editing */state[/* editing */1],
              /* newTodo */state[/* newTodo */2],
              /* todos */todos
            ]]);
}

var component = ReasonReact.statefulComponent("TodoAppRe");

function make() {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = function (_, self) {
    var f1 = function (_, state, _$1) {
      return /* Update */Block.__(0, [/* record */[
                  /* nowShowing : AllTodos */0,
                  /* editing */state[/* editing */1],
                  /* newTodo */state[/* newTodo */2],
                  /* todos */state[/* todos */3]
                ]]);
    };
    var f2 = function (_, state, _$1) {
      return /* Update */Block.__(0, [/* record */[
                  /* nowShowing : ActiveTodos */1,
                  /* editing */state[/* editing */1],
                  /* newTodo */state[/* newTodo */2],
                  /* todos */state[/* todos */3]
                ]]);
    };
    var f3 = function (_, state, _$1) {
      return /* Update */Block.__(0, [/* record */[
                  /* nowShowing : CompletedTodos */2,
                  /* editing */state[/* editing */1],
                  /* newTodo */state[/* newTodo */2],
                  /* todos */state[/* todos */3]
                ]]);
    };
    var router = new Director.Router({
          "/": Curry._1(self[/* update */2], f1),
          "/active": Curry._1(self[/* update */2], f2),
          "/completed": Curry._1(self[/* update */2], f3)
        });
    router.init("/");
    return /* NoUpdate */0;
  };
  newrecord[/* render */10] = function (state, self) {
    var todos = state[/* todos */3];
    var editing = state[/* editing */1];
    var todoItems = List.map(function (todo) {
          var editing$1 = editing ? +(editing[0] === todo[/* id */0]) : /* false */0;
          return ReasonReact.element(/* Some */[todo[/* id */0]], /* None */0, TodoItem.make(todo, editing$1, Curry._1(self[/* update */2], function (param, param$1, param$2) {
                              return destroy(todo, param, param$1, param$2);
                            }), Curry._1(self[/* update */2], function (param, param$1, param$2) {
                              return save(todo, param, param$1, param$2);
                            }), Curry._1(self[/* update */2], function (param, param$1, param$2) {
                              return edit(todo, param, param$1, param$2);
                            }), Curry._1(self[/* update */2], function (param, param$1, param$2) {
                              return toggle(todo, param, param$1, param$2);
                            }), Curry._1(self[/* update */2], cancel), /* array */[]));
        }, List.filter(function (todo) {
                var match = state[/* nowShowing */0];
                switch (match) {
                  case 0 : 
                      return /* true */1;
                  case 1 : 
                      return 1 - todo[/* completed */2];
                  case 2 : 
                      return todo[/* completed */2];
                  
                }
              })(todos));
    var todosLength = List.length(todos);
    var completedCount = List.length(List.filter(function (todo) {
                return todo[/* completed */2];
              })(todos));
    var activeTodoCount = todosLength - completedCount | 0;
    var footer;
    var exit = 0;
    if (activeTodoCount !== 0 || completedCount !== 0) {
      exit = 1;
    } else {
      footer = null;
    }
    if (exit === 1) {
      footer = ReasonReact.element(/* None */0, /* None */0, TodoFooter.make(activeTodoCount, completedCount, state[/* nowShowing */0], Curry._1(self[/* update */2], clearCompleted), /* array */[]));
    }
    var match = +(todosLength === 0);
    var main = match !== 0 ? null : React.createElement("section", {
            className: "main"
          }, React.createElement("input", {
                className: "toggle-all",
                checked: Js_boolean.to_js_boolean(+(activeTodoCount === 0)),
                type: "checkbox",
                onChange: Curry._1(self[/* update */2], toggleAll)
              }), React.createElement("ul", {
                className: "todo-list"
              }, $$Array.of_list(todoItems)));
    return React.createElement("div", undefined, React.createElement("header", {
                    className: "header"
                  }, React.createElement("h1", undefined, "todos"), React.createElement("input", {
                        className: "new-todo",
                        autoFocus: true,
                        placeholder: "What needs to be done?",
                        value: state[/* newTodo */2],
                        onKeyDown: Curry._1(self[/* update */2], handleNewTodoKeyDown),
                        onChange: Curry._1(self[/* update */2], handleChange)
                      })), main, footer);
  };
  newrecord[/* initialState */11] = function () {
    var match = localStorage.getItem(namespace);
    var todos = match !== null ? JSON.parse(match) : /* [] */0;
    return /* record */[
            /* nowShowing : AllTodos */0,
            /* editing : None */0,
            /* newTodo */"",
            /* todos */todos
          ];
  };
  return newrecord;
}

var Top = /* module */[
  /* handleChange */handleChange,
  /* handleNewTodoKeyDown */handleNewTodoKeyDown,
  /* toggleAll */toggleAll,
  /* toggle */toggle,
  /* destroy */destroy,
  /* edit */edit,
  /* save */save,
  /* cancel */cancel,
  /* clearCompleted */clearCompleted,
  /* component */component,
  /* make */make
];

ReactDOMRe.renderToElementWithClassName(ReasonReact.element(/* None */0, /* None */0, make(/* array */[])), "todoapp");

exports.namespace   = namespace;
exports.saveLocally = saveLocally;
exports.Top         = Top;
/* component Not a pure module */
